[tool.poetry]
name = "python_template"
version = "0.0.0"
description = "Python Template"
readme = "README.md"

authors = [
    "template <template@github.com>",
]
maintainers = [
    "template <template@github.com>",
]

keywords = [
    "template"
]

classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.urls]
repository = "https://github.com/ilkersigirci/python-template"

[tool.poetry.build]
generate-setup-file = false

[tool.poetry.scripts]
placeholder = "python_template.scripts.placeholder:placeholder_script"

## poetry source add --secondary private-pypi http://private-pypi/simple/
# [[tool.poetry.source]]
# name = "private-pypi"
# url = "http://private-pypi/simple/" # NOTE: /simple/ is important
# default = false
# secondary = true

[tool.poetry.dependencies]
python = ">=3.8,<3.12"

[tool.poetry.group.test.dependencies]
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
pytest-rerunfailures = "^10.2"
pytest-xdist = {version = "^3.0.0", extras = ["psutil"]}
#pytest-timeout = ""

[tool.poetry.group.doc.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^9.0.12"
mkdocstrings = {version = "^0.20.0", extras = ["python"]}
# mdx-include = "^1.4.2"
# mkdocs-markdownextradata-plugin = "^0.2.5"

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.19.0"
ruff = "0.0.262"
black = {version = "23.1.0", extras = ["d", "jupyter"]}
mypy = "^1.0.0"
scalene = "^1.5.19"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--import-mode=importlib",
    "--color=yes",
    "--verbose",
#    "--durations=0",
#    "--strict-markers",
#    "--doctest-modules",
    # NOTE: cov is not working with pycharm debugger. Enable it later!
#    "--cov python_template",
#    "--cov-report=xml",
#    "--cov-report html",
]

testpaths = ["tests"]

# TODO: Make them inherit from yaml file
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)-20s :: %(name)-8s :: %(levelname)-8s :: %(filename)s:%(lineno)d - (%(funcName)s) :: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"


[tool.black]
# required-version = "23.1.0"
line-length = 88
color = true
# skip-string-normalization = true
extra-exclude = '''
/(
    \.git
  | _build
)/
'''

[tool.ruff]
target-version = "py38"
# required-version = "0.0.238"
line-length = 88
select = [
    "B",  # flake8-bugbear
    "C",  # flake8-comprehensions
    "C9",  # mccabe
    "D",  # flake8-docstrings
    "E",  # pycodestyle errors (default)
    "F",  # pyflakes (default)
    "I",  # isort
    "PD", # pandas-vet
    "PIE", # pie
    "PL",  # pylint
    "PTH", # pathlib
    "Q",  # flake8-quotes
    "RET", # return
    "RUF", # Enable all ruff-specific checks
    "SIM", # simplify
    "T20",  # (disallow print statements) keep debugging statements out of the codebase
    "W",  # pycodestyle warnings
]
#extend-select = []
respect-gitignore = true
# fix = true
unfixable = [
    "F401" # Unused imports.
]
ignore-init-module-imports = true
# ignore = []
extend-ignore = [
    "E501",  # Line too long, handled by black
    "D107", # "Missing docstring in __init__",
]
extend-exclude = [
    "docs",
    "tests",
]

# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
[tool.ruff.per-file-ignores]
"__init__.py" = ["E402", "F401"]
# "path/to/file.py" = ["E402"]
# 'python_template/__init__.py' = ['F405', 'F403']

# [tool.ruff.flake8-quotes]
# inline-quotes = "single"
# multiline-quotes = "double"
# docstring-quotes = "double"

[tool.ruff.flake8-import-conventions.extend-aliases]
some_alias = ""

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
combine-as-imports = true
# force-wrap-aliases = true
# known-first-party = ["SomeLibrary"]
# known-third-party = ["SomeLibrary"]

# mypy section
# Read more here: https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
[tool.mypy]
# python_version = "3.8"
files = ["python_template"]
# exclude = ['^tests/']
strict = true
show_error_codes = true
# ignore_missing_imports = true

# TODO: Check whether this is working
[[tool.mypy.overrides]]
module = "python_template.tests.*"
ignore_missing_imports = true
check_untyped_defs = true

[tool.coverage.run]
source = ['python_template']
branch = true
context = '${CONTEXT}'

[tool.coverage.report]
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    '@overload',
]
# show_missing = True

# [tool.coverage.paths]
# source = [
#     'python_template/',
# ]

######### Local poetry.toml example ##############
# [virtualenvs]
# create = false

# [repositories]
# [repositories.private-pypi]
# url = "http://private-pypi/"
##################################################

[build-system]
requires = ["poetry-core==1.5.1"]
build-backend = "poetry.core.masonry.api"

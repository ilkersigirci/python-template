{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python Template","text":""},{"location":"#project-structure","title":"Project Structure","text":"<ul> <li>It uses cookiecutter for project templating.</li> <li>It uses uv for python dependency operations and virtual environment management.</li> <li>It uses <code>src</code> layout, which is the recommended layout for python projects to avoid common pitfalls.</li> <li>It uses <code>project.toml</code> instead of <code>setup.py</code> and <code>setup.cfg</code>. The reasoning is following:<ul> <li>As official setuptools guide says, \" configuring new projects via setup.py is discouraged\"</li> <li>One of the biggest problems with setuptools is that the use of an executable file (i.e. the setup.py) cannot be executed without knowing its dependencies. And there is really no way to know what these dependencies are unless you actually execute the file that contains the information related to package dependencies.</li> <li>The pyproject.toml file is supposed to solve the build-tool dependency chicken and egg problem since pip itself can read pyproject.yoml along with the version of setuptools or wheel the project requires.</li> <li>The pyproject.toml file was introduced in PEP-518 (2016) as a way of separating configuration of the build system from a specific, optional library (setuptools) and also enabling setuptools to install itself without already being installed. Subsequently PEP-621 (2020) introduces the idea that the pyproject.toml file be used for wider project configuration and PEP-660 (2021) proposes finally doing away with the need for setup.py for editable installation using pip.</li> </ul> </li> </ul>"},{"location":"#steps","title":"Steps","text":"<ul> <li>Install uv system-wide</li> </ul> <pre><code># On macOS and Linux.\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# On Windows.\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <ul> <li>Create the project using cookiecutter</li> </ul> <pre><code>uvx cookiecutter https://github.com/ilkersigirci/python-template.git\n</code></pre>"},{"location":"tutorials/docker/","title":"Docker","text":"<pre><code># Development build\ndocker build --tag {{cookiecutter.project_name}} --file docker/Dockerfile --target development .\n\n# Production build\ndocker build --tag {{cookiecutter.project_name}} --file docker/Dockerfile --target production .\n</code></pre> <ul> <li>To run command inside the container:</li> </ul> <pre><code>docker run -it {{cookiecutter.project_name}}:latest bash\n\n# Temporary container\ndocker run --rm -it {{cookiecutter.project_name}}:latest bash\n</code></pre> <ul> <li>Development inside the container:</li> <li>For more information watch-versus-bind-mounts</li> </ul> <pre><code>docker compose up -d {{cookiecutter.project_name}}-dev --watch\n</code></pre> <ul> <li>Run production image:</li> </ul> <pre><code>docker compose up -d {{cookiecutter.project_name}}-prod\n</code></pre>"},{"location":"tutorials/ide-settings/","title":"IDE Setings","text":""},{"location":"tutorials/ide-settings/#pycharm","title":"Pycharm","text":"<ul> <li>Line-length: <code>Editor -&gt; Code Style -&gt; Hard wrap at 88</code></li> </ul>"},{"location":"tutorials/ide-settings/#inspections","title":"Inspections","text":"<p>Settings -&gt; Editor -&gt; Inspections -&gt; Python</p> <p>Enable all except:</p> <ul> <li>Accessing a protected member of a class or a module</li> <li>Assignment can be replaced with augmented assignments</li> <li>Classic style class usage</li> <li>Incorrect BDD Behave-specific definitions</li> <li>No encoding specified for file</li> <li>The function argument is equal to the default parameter</li> <li>Type checker compatible with Pydantic</li> <li>For \"PEP 8 coding style violation\":   Ignore = E266, E501</li> <li>For \"PEP 8 naming convetion violation\":   Ignore = N803</li> </ul>"},{"location":"tutorials/ide-settings/#plugins","title":"Plugins","text":"<ul> <li>Ruff</li> <li>Pydantic</li> </ul>"},{"location":"tutorials/ide-settings/#vscode","title":"Vscode","text":"<ul> <li>All recommended settings and extensions can be found in <code>.vscode</code> directory.</li> </ul>"},{"location":"tutorials/makefile/","title":"Useful Makefile commands","text":"<pre><code># All available commands\nmake\nmake help\n\n# Run all tests\nmake -s test\n\n# Run specific tests\nmake -s test-one TEST_MARKER=&lt;TEST_MARKER&gt;\n\n# Remove unnecessary files such as build,test, cache\nmake -s clean\n\n# Run all pre-commit hooks\nmake -s pre-commit\n\n# Lint the project\nmake -s lint\n\n# Profile a file\nmake -s profile PROFILE_FILE_PATH=&lt;PATH_TO_FILE&gt;\n</code></pre>"},{"location":"tutorials/uv/","title":"Dummy UV","text":""}]}
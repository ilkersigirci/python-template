#{% raw %}
name: Publish to PyPI

on:
  release:
    types:
      - created

jobs:
  extract-version:
    name: Extract version from release tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Extract version from tag
        id: get-version
        run: |
          TAG_NAME=${{ github.event.release.tag_name }}

          if [[ ! $TAG_NAME =~ ^v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "The tag $TAG_NAME is not in the expected format 'v<MAJOR>.<MINOR>.<PATCH>'"
            exit 1
          fi

          VERSION=${TAG_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: [extract-version]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5

      - name: Update version in pyproject.toml
        run: |
          VERSION=${{ needs.extract-version.outputs.version }}
          echo "Using version: $VERSION"

          # Update pyproject.toml with the version
          sed -i "s/version = \"[^\"]*\"/version = \"$VERSION\"/" pyproject.toml

      - name: Build source distribution
        run: uv build --sdist --out-dir dist

      - name: Upload source distribution artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          retention-days: 1

  publish:
    name: Publish to PyPI
    needs: [extract-version, build-sdist]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5

      - name: Publish to PyPI
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.UV_PUBLISH_TOKEN }}
        run: uv publish dist/*
#{% endraw %}
